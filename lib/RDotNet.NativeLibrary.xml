<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RDotNet.NativeLibrary</name>
    </assembly>
    <members>
        <member name="T:RDotNet.NativeLibrary.IDynamicLibraryLoader">
            <summary>
            An interface definition to hide the platform specific aspects of library loading
            </summary>
            <remarks>There are probably projects 'out there' doing this already, but nothing 
            is obvious from a quick search. Re-consider again if you need more features.</remarks>
        </member>
        <member name="M:RDotNet.NativeLibrary.UnixLibraryLoader.GetLastError">
            <summary>
            Gets the last error. NOTE: according to http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html, returns NULL if called more than once after dlopen.
            </summary>
            <returns>The last error.</returns>
        </member>
        <member name="T:RDotNet.NativeLibrary.UnmanagedDll">
            <summary>
            A proxy for unmanaged dynamic link library (DLL).
            </summary>
        </member>
        <member name="M:RDotNet.NativeLibrary.UnmanagedDll.#ctor(System.String)">
            <summary>
            Creates a proxy for the specified dll.
            </summary>
            <param name="dllName">The DLL's name.</param>
        </member>
        <member name="M:RDotNet.NativeLibrary.UnmanagedDll.GetFunction``1">
            <summary>
            Creates the delegate function for the specified function defined in the DLL.
            </summary>
            <typeparam name="TDelegate">The type of delegate.</typeparam>
            <returns>The delegate.</returns>
        </member>
        <member name="M:RDotNet.NativeLibrary.UnmanagedDll.GetFunction``1(System.String)">
            <summary>
            Creates the delegate function for the specified function defined in the DLL.
            </summary>
            <typeparam name="TDelegate">The type of delegate.</typeparam>
            <param name="entryPoint">The name of function.</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:RDotNet.NativeLibrary.UnmanagedDll.DangerousGetHandle(System.String)">
            <summary>
            Gets the handle of the specified entry.
            </summary>
            <param name="entryPoint">The name of function.</param>
            <returns>The handle.</returns>
        </member>
        <member name="T:RDotNet.NativeLibrary.NativeUtility">
            <summary>
            Collection of utility methods for operating systems.
            </summary>
        </member>
        <member name="M:RDotNet.NativeLibrary.NativeUtility.GetPlatform">
            <summary>
            Gets the platform on which the current process runs.
            </summary>
            <remarks>
            <see cref="P:System.Environment.OSVersion"/>'s platform is not <see cref="F:System.PlatformID.MacOSX"/> even on Mac OS X.
            This method returns <see cref="F:System.PlatformID.MacOSX"/> when the current process runs on Mac OS X.
            This method uses UNIX's uname command to check the operating system,
            so this method cannot check the OS correctly if the PATH environment variable is changed (will returns <see cref="F:System.PlatformID.Unix"/>).
            </remarks>
            <returns>The current platform.</returns>
        </member>
        <member name="M:RDotNet.NativeLibrary.NativeUtility.ExecCommand(System.String,System.String)">
            <summary>
            Execute a command in a new process
            </summary>
            <param name="processName">Process name e.g. "uname"</param>
            <param name="arguments">Arguments e.g. "-s"</param>
            <returns>The output of the command to the standard output stream</returns>
        </member>
        <member name="M:RDotNet.NativeLibrary.NativeUtility.SetEnvironmentVariables(System.String,System.String)">
            <summary>
            Sets the PATH and R_HOME environment variables if needed.
            </summary>
            <param name="rPath">The path of the directory containing the R native library. 
            If null (default), this function tries to locate the path via the Windows registry, or commonly used locations on MacOS and Linux</param>
            <param name="rHome">The path for R_HOME. If null (default), the function checks the R_HOME environment variable. If none is set, 
            the function uses platform specific sensible default behaviors.</param>
            <remarks>
            This function has been designed to limit the tedium for users, while allowing custom settings for unusual installations.
            </remarks>
        </member>
        <member name="M:RDotNet.NativeLibrary.NativeUtility.GetRDllFileName">
            <summary>
            Gets the default file name of the R library on the supported platforms.
            </summary>
            <returns>R dll file name</returns>
        </member>
    </members>
</doc>
